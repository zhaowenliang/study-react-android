apply plugin: "com.android.application"
apply from: "../../node_modules/react-native/react.gradle"

import com.android.build.OutputFile

project.ext.react = [
        // 是否使用Hermes引擎，替换JavaScript Core的JavaScript引擎
        enableHermes: false,  // clean and rebuild if changing
]

/**
 * 是否根据CPU构架类型构建多个apk
 *   - 比如构建出仅工作到 ARM 架构设备的 APK
 *   - 比如构建出仅工作到 x86 架构设备的 APK
 *
 * true：根据CPU架构构建多个apk
 * false：构建一个通用apk
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * JavaScriptCore的首选构建风格。
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * 是否启用Hermes虚拟机。
 * 在project.ext.react中配置是否启用。
 */
def enableHermes = project.ext.react.get("enableHermes", false);

android {
    compileSdkVersion versions.compileSdkVersion

    defaultConfig {
        applicationId app.applicationId
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion
        versionCode app.versionCode
        versionName app.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://facebook.github.io/react-native/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        pickFirst "lib/armeabi-v7a/libc++_shared.so"
        pickFirst "lib/arm64-v8a/libc++_shared.so"
        pickFirst "lib/x86/libc++_shared.so"
        pickFirst "lib/x86_64/libc++_shared.so"
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride = versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group: 'com.facebook.fbjni'
    }

    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group: 'com.facebook.flipper'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group: 'com.facebook.flipper'
    }

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }

    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"  // From node_modules 总是匹配最新版本
    // node_modules react-native使用库
    implementation project(':react-native-gesture-handler')
    implementation project(':react-native-safe-area-context')

    implementation "androidx.appcompat:appcompat:${versions.androidx_compat}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.androidx_constraintlayout}"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:${versions.androidx_swiperefreshlayout}"
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
